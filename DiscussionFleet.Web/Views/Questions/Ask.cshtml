@using DiscussionFleet.Web.Models.Question
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using System.Text.Json
@model QuestionAskViewModel;

@{
    ViewData["Title"] = "Ask question";
}

@section ExternalLibFiles
{
    <link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/easymde/dist/easymde.min.css">
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/github-dark-dimmed.min.css">
    <script src="https://cdn.jsdelivr.net/npm/dompurify@3.0.11/dist/purify.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@12.0.1/lib/marked.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked-highlight@2.1.1/lib/index.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/easymde/dist/easymde.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/highlight.min.js"></script>
}

@section StyleSheets
{
    <style>
  #preview-tab {
    border: 1px solid #ced4da;
    border-radius: 4px;
  }

  .btn-close,
  .insert-many-tags input {
    outline: none !important;
    box-shadow: none !important;
  }
</style>

}

<div class="page-wrapper">
    <div class="page-body">
        <div class="container-xl">
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs nav-fill" data-bs-toggle="tabs">
                        <li class="nav-item">
                            <a href="#editor-tab" class="nav-link active" data-bs-toggle="tab">
                                Editor
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="#preview-tab" class="nav-link" id="md-prev-window" data-bs-toggle="tab">
                                Preview
                            </a>
                        </li>

                    </ul>
                </div>
                <div class="card-body">

                    @if (Model.HasError)
                    {
                        <div class="row my-3">
                            <div class="col">
                                <div class="card">
                                    <div class="card-status-top bg-danger"></div>
                                    <div class="card-body">
                                        <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="tab-content">
                        <div class="tab-pane active show" id="editor-tab">
                            <div class="mb-3">
                                <form asp-controller="Questions" asp-action="Ask" asp-antiforgery="true" id="md-form" class="mb-3">
                                    <div class="mb-3">
                                        <label asp-for="Title" class="form-label">Title</label>
                                        <input asp-for="Title" type="text" class="form-control" placeholder="Title">
                                        <span asp-validation-for="Title" class="text-danger"></span>
                                    </div>

                                    <div class="form-label" asp-for="SelectedTags">
                                        Tags <span class="text-muted">(max @Model.MaxTags) </span>
                                    </div>
                                    <div class="mb-4">
                                        <select asp-for="Tags" multiple id="selected-tags" type="text" class="form-control">
                                            @foreach (var tag in await Model.FetchTagsAsync())
                                            {
                                                // if (Model.Tags.existing is not null && Model.Tags.existing.Contains(tag.Id))
                                                if (Model.Tags.existing.Contains(tag.Id))
                                                {
                                                    <option value="@tag.Id" selected>@tag.Title</option>
                                                }
                                                else
                                                {
                                                    <option value="@tag.Id">@tag.Title</option>
                                                }
                                            }
                                        </select>
                                        @* <span asp-validation-for="SelectedExistingTags" class="text-danger"></span> *@
                                    </div>

                                    <div>
                                        <label asp-for="Body" class="form-label">Body</label>
                                        <textarea asp-for="Body" id="md-pad"></textarea>
                                        <span asp-validation-for="Body" class="text-danger"></span>
                                    </div>

                                    <div class="form-footer d-flex justify-content-center">
                                        <button type="submit" id="md-submit-btn" class="btn btn-primary w-50">
                                            Submit
                                        </button>
                                    </div>

                                </form>
                            </div>
                        </div>
                        <div class="tab-pane p-2" id="preview-tab">
                            <div id="md-preview-tab"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <partial name="_ValidationScriptsPartial"/>

    <script>
  const maxTags = @Model.MaxTags;
  const canCreate = @Html.Raw(JsonSerializer.Serialize(Model.CanCreate));
  const newOptions = new Set();

  const inputProcessor = function (input) {
    console.log('New option created:', input);
    return {
      value: input,
      text: input
    };
  }

  const select = new TomSelect(document.getElementById('selected-tags'), {
    plugins: {
      remove_button: {
        title: 'Remove this item',
      }
    },
    create: canCreate,
    maxItems: maxTags,
    createFilter: function (input) {
      let isValid = true;
      for (let key in this.options) {
        if (this.options.hasOwnProperty(key)) {
          let processedText = input.toLowerCase();
          processedText = processedText.trim();
          if (this.options[key]?.text === processedText) {
            isValid = false;
          }
        }
      }
      return isValid;
    },
    onItemAdd: function (value, item) {
      if (this.userOptions.hasOwnProperty(value)) {
        newOptions.add(value.trim());
      }
    },

    persist: false,
    copyClassesToDropdown: false,
    dropdownParent: 'body',
    controlInput: '<input>',
    render: {
      item: function (data, escape) {
        if (data.customProperties) {
          return '<div><span class="dropdown-item-indicator">' + data.customProperties + '</span>' + escape(data.text) + '</div>';
        }
        return '<div>' + escape(data.text) + '</div>';
      },
      option: function (data, escape) {
        if (data.customProperties) {
          return '<div><span class="dropdown-item-indicator">' + data.customProperties + '</span>' + escape(data.text) + '</div>';
        }
        return '<div>' + escape(data.text) + '</div>';
      },
    },
  });

  select.on('item_remove', function (value) {
    newOptions.delete(value);
  });

  document.getElementById('md-form').addEventListener('submit', function () {
    const itemsToRemove = [];

    newOptions.forEach(function (value) {
      itemsToRemove.push(value);
      let hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = '@nameof(QuestionAskViewModel.Tags.newlyCreated)';
      hiddenInput.value = value;
      document.getElementById('md-form').appendChild(hiddenInput);
    })

    itemsToRemove.forEach(function (item) {
      select.removeItem(item);
    });
  });
</script>

    <script>
  const { markedHighlight } = globalThis.markedHighlight;

  const easyMDE = new EasyMDE({
    toolbar: ["bold", "italic", "strikethrough", "|", "heading-1", "heading-2", "heading-3", "|", "code", "quote", "unordered-list", "ordered-list", "|", "link", "undo", "redo", "|", "fullscreen", "guide"],
    element: document.getElementById('md-pad'),
  });


  const markedWithSyntaxHighlighter = new marked.Marked(
    markedHighlight({
      langPrefix: 'hljs language-',
      highlight(code, lang, info) {
        const language = hljs.getLanguage(lang) ? lang : 'plaintext';
        return hljs.highlight(code, { language }).value;
      }
    })
  );


  const replaceRegex = /^[\u200B\u200C\u200D\u200E\u200F\uFEFF]/;
  const emptyTesterRegex = /\b\w+\b/;
  const mdForm = document.getElementById('md-form');
  const mdPad = document.getElementById('md-pad');
  const mdPreviewTab = document.getElementById('md-preview-tab');


  let x = document.querySelector(".EasyMDEContainer");
  let w = x.clientHeight;

  easyMDE.codemirror.on("change", () => {
    w = x.clientHeight;
    mdPad.value = easyMDE.value().replace(replaceRegex, "");
  });

  document.getElementById("md-prev-window").addEventListener('focus', function (e) {
    if (emptyTesterRegex.test(easyMDE.value())) {
      mdPreviewTab.innerHTML =
        DOMPurify.sanitize(markedWithSyntaxHighlighter.parse(easyMDE.value().replace(replaceRegex, "")));

      document.getElementById("preview-tab").style.minHeight = w + "px";
    } else {
      document.getElementById("preview-tab").style.minHeight = w + "px";
      mdPreviewTab.innerHTML = `
          <div class="empty col" id="md-preview-empty">
            <div class="empty-img"><img src="/tabler/dist-files/illustrations/undraw_quitting_time_dm8t.svg"
                height="128" alt="">
            </div>
            <p class="empty-title">No preview found</p>
          </div>`;
    }
  });

  mdForm.addEventListener('submit', function (e) {
    mdPad.value = easyMDE.value().replace(replaceRegex, "");
  });

</script>

}